// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bfgs_optim
List bfgs_optim(NumericVector params_no_na, Function SEM_likelihood, SEXP data, bool exact_value, List control);
RcppExport SEXP _bdsm_bfgs_optim(SEXP params_no_naSEXP, SEXP SEM_likelihoodSEXP, SEXP dataSEXP, SEXP exact_valueSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type params_no_na(params_no_naSEXP);
    Rcpp::traits::input_parameter< Function >::type SEM_likelihood(SEM_likelihoodSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type exact_value(exact_valueSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(bfgs_optim(params_no_na, SEM_likelihood, data, exact_value, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bdsm_bfgs_optim", (DL_FUNC) &_bdsm_bfgs_optim, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bdsm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
